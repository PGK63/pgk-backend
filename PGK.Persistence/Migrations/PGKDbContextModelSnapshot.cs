// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PGK.Persistence;

#nullable disable

namespace PGK.Persistence.Migrations
{
    [DbContext(typeof(PGKDbContext))]
    partial class PGKDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NotificationUser", b =>
                {
                    b.Property<int>("NotificationsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("NotificationsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("NotificationUser");
                });

            modelBuilder.Entity("PGK.Domain.Department.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartmentHeadId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentHeadId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("PGK.Domain.Group.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassroomTeacherId")
                        .HasColumnType("int");

                    b.Property<int>("Course")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DeputyHeadmaId")
                        .HasColumnType("int");

                    b.Property<int?>("HeadmanId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomTeacherId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DeputyHeadmaId");

                    b.HasIndex("HeadmanId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PGK.Domain.Journal.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Course")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("PGK.Domain.Journal.JournalSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("JournalSubjects");
                });

            modelBuilder.Entity("PGK.Domain.Journal.JournalSubjectColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Evaluation")
                        .HasColumnType("int");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.ToTable("JournalSubjectColumns");
                });

            modelBuilder.Entity("PGK.Domain.Journal.JournalSubjectRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("JournalSubjectId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalSubjectId");

                    b.HasIndex("StudentId");

                    b.ToTable("JournalSubjectRows");
                });

            modelBuilder.Entity("PGK.Domain.Journal.JournalTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HomeWork")
                        .HasColumnType("longtext");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("JournalSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("JournalSubjectId");

                    b.ToTable("JournalTopics");
                });

            modelBuilder.Entity("PGK.Domain.Language.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("PGK.Domain.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PGK.Domain.Raportichka.Raportichka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Raportichkas");
                });

            modelBuilder.Entity("PGK.Domain.Raportichka.RaportichkaRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("NumberLesson")
                        .HasColumnType("int");

                    b.Property<int>("RaportichkaId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaportichkaId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("RaportichkaRows");
                });

            modelBuilder.Entity("PGK.Domain.Schedules.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("PGK.Domain.Schedules.ScheduleColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ScheduleDepartmentId");

                    b.ToTable("ScheduleColumns");
                });

            modelBuilder.Entity("PGK.Domain.Schedules.ScheduleDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleDepartments");
                });

            modelBuilder.Entity("PGK.Domain.Schedules.ScheduleRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScheduleRows");
                });

            modelBuilder.Entity("PGK.Domain.Speciality.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameAbbreviation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("PGK.Domain.Subject.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SubjectTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("PGK.Domain.TechnicalSupport.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("PGK.Domain.TechnicalSupport.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Edited")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Pin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("UserVisible")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("PGK.Domain.TechnicalSupport.MessageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageContents");
                });

            modelBuilder.Entity("PGK.Domain.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("DrarkMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailVerification")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IncludedJournalNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IncludedNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IncludedRaportichkaNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IncludedSchedulesNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IncludedTechnicalSupportNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<string>("SendEmailToken")
                        .HasColumnType("longtext");

                    b.Property<bool>("SoundNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TechnicalSupportChatId")
                        .HasColumnType("int");

                    b.Property<int?>("TelegramId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeCorners")
                        .HasColumnType("int");

                    b.Property<int>("ThemeFontSize")
                        .HasColumnType("int");

                    b.Property<int>("ThemeFontStyle")
                        .HasColumnType("int");

                    b.Property<int>("ThemeStyle")
                        .HasColumnType("int");

                    b.Property<bool>("VibrationNotifications")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LanguageId");

                    b.HasIndex("TechnicalSupportChatId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PGK.Domain.Vedomost.Vedomost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Vedomost");
                });

            modelBuilder.Entity("SubjectTeacherUser", b =>
                {
                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("SubjectsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("SubjectTeacherUser");
                });

            modelBuilder.Entity("PGK.Domain.User.Admin.AdminUser", b =>
                {
                    b.HasBaseType("PGK.Domain.User.User");

                    b.ToTable("AdminUsers");
                });

            modelBuilder.Entity("PGK.Domain.User.DepartmentHead.DepartmentHeadUser", b =>
                {
                    b.HasBaseType("PGK.Domain.User.User");

                    b.ToTable("DepartmentHeadUsers");
                });

            modelBuilder.Entity("PGK.Domain.User.EducationalSector.EducationalSectorUser", b =>
                {
                    b.HasBaseType("PGK.Domain.User.User");

                    b.ToTable("EducationalSectorUsers");
                });

            modelBuilder.Entity("PGK.Domain.User.Student.StudentUser", b =>
                {
                    b.HasBaseType("PGK.Domain.User.User");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GroupId");

                    b.ToTable("StudentUsers");
                });

            modelBuilder.Entity("PGK.Domain.User.Teacher.TeacherUser", b =>
                {
                    b.HasBaseType("PGK.Domain.User.User");

                    b.ToTable("TeacherUsers");
                });

            modelBuilder.Entity("PGK.Domain.User.DeputyHeadma.DeputyHeadmaUser", b =>
                {
                    b.HasBaseType("PGK.Domain.User.Student.StudentUser");

                    b.ToTable("DeputyHeadmaUsers");
                });

            modelBuilder.Entity("PGK.Domain.User.Headman.HeadmanUser", b =>
                {
                    b.HasBaseType("PGK.Domain.User.Student.StudentUser");

                    b.ToTable("HeadmanUsers");
                });

            modelBuilder.Entity("NotificationUser", b =>
                {
                    b.HasOne("PGK.Domain.Notification.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGK.Domain.Department.Department", b =>
                {
                    b.HasOne("PGK.Domain.User.DepartmentHead.DepartmentHeadUser", "DepartmentHead")
                        .WithMany()
                        .HasForeignKey("DepartmentHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentHead");
                });

            modelBuilder.Entity("PGK.Domain.Group.Group", b =>
                {
                    b.HasOne("PGK.Domain.User.Teacher.TeacherUser", "ClassroomTeacher")
                        .WithMany("Groups")
                        .HasForeignKey("ClassroomTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.Department.Department", "Department")
                        .WithMany("Groups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.User.DeputyHeadma.DeputyHeadmaUser", "DeputyHeadma")
                        .WithMany()
                        .HasForeignKey("DeputyHeadmaId");

                    b.HasOne("PGK.Domain.User.Headman.HeadmanUser", "Headman")
                        .WithMany()
                        .HasForeignKey("HeadmanId");

                    b.HasOne("PGK.Domain.Speciality.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassroomTeacher");

                    b.Navigation("Department");

                    b.Navigation("DeputyHeadma");

                    b.Navigation("Headman");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("PGK.Domain.Journal.Journal", b =>
                {
                    b.HasOne("PGK.Domain.Group.Group", "Group")
                        .WithMany("Journals")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PGK.Domain.Journal.JournalSubject", b =>
                {
                    b.HasOne("PGK.Domain.Journal.Journal", "Journal")
                        .WithMany("Subjects")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.Subject.Subject", "Subject")
                        .WithMany("JournalSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.User.Teacher.TeacherUser", "Teacher")
                        .WithMany("JournalSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PGK.Domain.Journal.JournalSubjectColumn", b =>
                {
                    b.HasOne("PGK.Domain.Journal.JournalSubjectRow", "Row")
                        .WithMany("Columns")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Row");
                });

            modelBuilder.Entity("PGK.Domain.Journal.JournalSubjectRow", b =>
                {
                    b.HasOne("PGK.Domain.Journal.JournalSubject", "JournalSubject")
                        .WithMany("Rows")
                        .HasForeignKey("JournalSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.User.Student.StudentUser", "Student")
                        .WithMany("JournalSubjectRows")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JournalSubject");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PGK.Domain.Journal.JournalTopic", b =>
                {
                    b.HasOne("PGK.Domain.Journal.JournalSubject", "JournalSubject")
                        .WithMany("Topics")
                        .HasForeignKey("JournalSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JournalSubject");
                });

            modelBuilder.Entity("PGK.Domain.Raportichka.Raportichka", b =>
                {
                    b.HasOne("PGK.Domain.Group.Group", "Group")
                        .WithMany("Raportichkas")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PGK.Domain.Raportichka.RaportichkaRow", b =>
                {
                    b.HasOne("PGK.Domain.Raportichka.Raportichka", "Raportichka")
                        .WithMany("Rows")
                        .HasForeignKey("RaportichkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.User.Student.StudentUser", "Student")
                        .WithMany("RaportichkaRows")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.Subject.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.User.Teacher.TeacherUser", "Teacher")
                        .WithMany("RaportichkaRows")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Raportichka");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PGK.Domain.Schedules.ScheduleColumn", b =>
                {
                    b.HasOne("PGK.Domain.Group.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("PGK.Domain.Schedules.ScheduleDepartment", "ScheduleDepartment")
                        .WithMany("Columns")
                        .HasForeignKey("ScheduleDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("ScheduleDepartment");
                });

            modelBuilder.Entity("PGK.Domain.Schedules.ScheduleDepartment", b =>
                {
                    b.HasOne("PGK.Domain.Department.Department", "Department")
                        .WithMany("ScheduleDepartments")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("PGK.Domain.Schedules.Schedule", "Schedule")
                        .WithMany("ScheduleDepartments")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("PGK.Domain.Schedules.ScheduleRow", b =>
                {
                    b.HasOne("PGK.Domain.Schedules.ScheduleColumn", "Column")
                        .WithMany("Rows")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.User.Teacher.TeacherUser", "Teacher")
                        .WithMany("ScheduleRows")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Column");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PGK.Domain.Speciality.Speciality", b =>
                {
                    b.HasOne("PGK.Domain.Department.Department", "Department")
                        .WithMany("Specializations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PGK.Domain.TechnicalSupport.Message", b =>
                {
                    b.HasOne("PGK.Domain.TechnicalSupport.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.User.User", "User")
                        .WithMany("TechnicalSupportMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PGK.Domain.TechnicalSupport.MessageContent", b =>
                {
                    b.HasOne("PGK.Domain.TechnicalSupport.Message", "Message")
                        .WithMany("Contents")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("PGK.Domain.User.User", b =>
                {
                    b.HasOne("PGK.Domain.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.TechnicalSupport.Chat", "TechnicalSupportChat")
                        .WithMany()
                        .HasForeignKey("TechnicalSupportChatId");

                    b.Navigation("Language");

                    b.Navigation("TechnicalSupportChat");
                });

            modelBuilder.Entity("PGK.Domain.Vedomost.Vedomost", b =>
                {
                    b.HasOne("PGK.Domain.Group.Group", "Group")
                        .WithMany("Vedomost")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SubjectTeacherUser", b =>
                {
                    b.HasOne("PGK.Domain.Subject.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.User.Teacher.TeacherUser", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGK.Domain.User.Admin.AdminUser", b =>
                {
                    b.HasOne("PGK.Domain.User.User", null)
                        .WithOne()
                        .HasForeignKey("PGK.Domain.User.Admin.AdminUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGK.Domain.User.DepartmentHead.DepartmentHeadUser", b =>
                {
                    b.HasOne("PGK.Domain.User.User", null)
                        .WithOne()
                        .HasForeignKey("PGK.Domain.User.DepartmentHead.DepartmentHeadUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGK.Domain.User.EducationalSector.EducationalSectorUser", b =>
                {
                    b.HasOne("PGK.Domain.User.User", null)
                        .WithOne()
                        .HasForeignKey("PGK.Domain.User.EducationalSector.EducationalSectorUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGK.Domain.User.Student.StudentUser", b =>
                {
                    b.HasOne("PGK.Domain.Department.Department", "Department")
                        .WithMany("StudentUsers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.Group.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PGK.Domain.User.User", null)
                        .WithOne()
                        .HasForeignKey("PGK.Domain.User.Student.StudentUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PGK.Domain.User.Teacher.TeacherUser", b =>
                {
                    b.HasOne("PGK.Domain.User.User", null)
                        .WithOne()
                        .HasForeignKey("PGK.Domain.User.Teacher.TeacherUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGK.Domain.User.DeputyHeadma.DeputyHeadmaUser", b =>
                {
                    b.HasOne("PGK.Domain.User.Student.StudentUser", null)
                        .WithOne()
                        .HasForeignKey("PGK.Domain.User.DeputyHeadma.DeputyHeadmaUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGK.Domain.User.Headman.HeadmanUser", b =>
                {
                    b.HasOne("PGK.Domain.User.Student.StudentUser", null)
                        .WithOne()
                        .HasForeignKey("PGK.Domain.User.Headman.HeadmanUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PGK.Domain.Department.Department", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("ScheduleDepartments");

                    b.Navigation("Specializations");

                    b.Navigation("StudentUsers");
                });

            modelBuilder.Entity("PGK.Domain.Group.Group", b =>
                {
                    b.Navigation("Journals");

                    b.Navigation("Raportichkas");

                    b.Navigation("Students");

                    b.Navigation("Vedomost");
                });

            modelBuilder.Entity("PGK.Domain.Journal.Journal", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("PGK.Domain.Journal.JournalSubject", b =>
                {
                    b.Navigation("Rows");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("PGK.Domain.Journal.JournalSubjectRow", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("PGK.Domain.Raportichka.Raportichka", b =>
                {
                    b.Navigation("Rows");
                });

            modelBuilder.Entity("PGK.Domain.Schedules.Schedule", b =>
                {
                    b.Navigation("ScheduleDepartments");
                });

            modelBuilder.Entity("PGK.Domain.Schedules.ScheduleColumn", b =>
                {
                    b.Navigation("Rows");
                });

            modelBuilder.Entity("PGK.Domain.Schedules.ScheduleDepartment", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("PGK.Domain.Subject.Subject", b =>
                {
                    b.Navigation("JournalSubjects");
                });

            modelBuilder.Entity("PGK.Domain.TechnicalSupport.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PGK.Domain.TechnicalSupport.Message", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("PGK.Domain.User.User", b =>
                {
                    b.Navigation("TechnicalSupportMessages");
                });

            modelBuilder.Entity("PGK.Domain.User.Student.StudentUser", b =>
                {
                    b.Navigation("JournalSubjectRows");

                    b.Navigation("RaportichkaRows");
                });

            modelBuilder.Entity("PGK.Domain.User.Teacher.TeacherUser", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("JournalSubjects");

                    b.Navigation("RaportichkaRows");

                    b.Navigation("ScheduleRows");
                });
#pragma warning restore 612, 618
        }
    }
}
